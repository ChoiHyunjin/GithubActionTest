# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
  pull_request:
    branches: [ "develop" ]
  pull_request_target:


# Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  preset:
    runs-on: ubuntu-latest
    steps:
      - name: event info
        run: |
          echo "github: ${{ github }}"
          echo "ref: ${{ github.ref }}"
          echo "refName: ${{ github.ref_name }}"
          echo "head_ref: ${{ github.head_ref }}"
          echo "event: ${{ github.event_name }}"
          echo condition: '${{ github.head_ref }}' != ''
          echo "condition2: '${{ github.head_ref }}' != ''"
      # This workflow contains a single job called "build"

  install_node_packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: 'yarn'
          cache-dependency-path: yarn.lock

  #      - name: Make cache folder
#        run: |
#          mkdir -p .yarn/cache
#          mkdir -p .yarn/unplugged
#
#      - name: Cache Yarn Package
#        uses: actions/cache@v3
#        with:
#          path: |
#            .yarn/cache
#            .yarn/unplugged
#          key: yarn-v15-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: yarn-v15-${{ runner.os }}-

      - run: yarn install --frozen-lockfile --immutable
      - name: Find type errors
        run: |
          cat tsconfig.json
          yarn type-check |& tee "ts-compile-output.log"
      - name: Lint ts and js cods
        run: yarn lint-check -f ./scripts/eslint-formatter.js |& tee "eslint-output.log"

#      - name: Install node dependencies
#        run: yarn install --immutable

  #  install_ruby_packages:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Restore Yarn Package Cache
  #        uses: actions/cache@v3
  #        with:
  #          path: vendor/bundle
  #          key: gem-v12-${{ runner.os }}-${{ hashFiles('Gemfile.lock') }}
  #
  #      - name: Install ruby gems
  #        run: bundle check || bundle install --jobs=4 --retry=3 --path vendor/bundle --clean

  check_type:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ install_node_packages ]
    if: ${{github.head_ref}} != ""

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Find type errors
        run: |
          cat tsconfig.json
          yarn type-check |& tee "ts-compile-output.log"

  check_lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ install_node_packages ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - name: Lint ts and js cods
        run: yarn lint-check -f ./scripts/eslint-formatter.js |& tee "eslint-output.log"

  check_import:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ install_node_packages ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - name: Detect cyclic imports
        run: yarn import-check |& tee "cyclic-import-output.log"

#  run_danger:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#    needs: [ lintCheck ]
#    steps:
#      - name: Run danger
#        run: yarn danger ci --verbose

